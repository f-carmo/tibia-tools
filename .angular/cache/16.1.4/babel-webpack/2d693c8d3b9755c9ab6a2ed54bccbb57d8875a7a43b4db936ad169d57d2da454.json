{"ast":null,"code":"import * as moment from 'moment';\nexport class Timer {\n  constructor(name, lap, startTime, active) {\n    this.lap = lap;\n    this.startTime = startTime;\n    this.name = name;\n    this.active = active;\n    this.id = Math.floor(Math.random() * 10000);\n    this.setEndTime();\n  }\n  static createEmptyTimer() {\n    return new Timer();\n  }\n  static createFromJSON(jsonObject) {\n    let timer = new Timer();\n    timer.JSONToObject(jsonObject);\n    return timer;\n  }\n  static createInitializedTimer(name, lap) {\n    return new Timer(name, lap, new Date(), true);\n  }\n  calculateTimeLeft() {\n    let endTime = moment(this.endTime);\n    if (typeof this.endTime === \"undefined\") {\n      throw new Error(\"endTime not defined\");\n    } else {\n      let duration = moment.duration(endTime.diff(moment()));\n      return duration;\n    }\n  }\n  startTimer() {\n    this.setEndTime();\n    this.activateTimer();\n  }\n  restartTimer() {\n    this.startTime = new Date();\n    this.setEndTime();\n    this.activateTimer();\n  }\n  resumeTimer() {\n    if (this.isEnded()) {\n      this.pauseTimer();\n    } else {\n      this.activateTimer();\n    }\n  }\n  formattedDisplay() {\n    let duration = this.calculateTimeLeft();\n    if (duration.days() * 24 > 1) {\n      return duration.days() + \" dias, \" + duration.hours() + \" horas, \" + duration.minutes() + \" minutos e \" + duration.seconds() + \" segundos\";\n    }\n    if (duration.days() * 24 > 0) {\n      return duration.days() + \" dia, \" + duration.hours() + \" horas, \" + duration.minutes() + \" minutos e \" + duration.seconds() + \" segundos\";\n    }\n    if (duration.hours() > 0) {\n      return duration.hours() + \" horas, \" + duration.minutes() + \" minutos e \" + duration.seconds() + \" segundos\";\n    } else {\n      return duration.minutes() + \" minutos e \" + duration.seconds() + \" segundos\";\n    }\n  }\n  setEndTime() {\n    this.endTime = moment(this.startTime).add(this.lap, 'hours').toDate();\n  }\n  activateTimer() {\n    this.active = true;\n    this.displayText = this.formattedDisplay();\n    this.intervalRef = setInterval(() => {\n      this.displayText = this.formattedDisplay();\n      this.pauseIfEnded();\n    }, 1000);\n  }\n  pauseIfEnded() {\n    if (moment().isAfter(this.endTime) || !this.active) {\n      this.pauseTimer();\n    }\n  }\n  isEnded() {\n    if (moment().isAfter(this.endTime)) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  pauseTimer() {\n    this.active = false;\n    clearInterval(this.intervalRef);\n    this.intervalRef = null;\n    this.setDefaultDisplayText();\n  }\n  setDefaultDisplayText() {\n    if (this.lap == 1) {\n      this.displayText = this.lap + \" hora\";\n    } else if (this.lap <= 24) {\n      this.displayText = this.lap + \" horas\";\n    } else if (this.lap < 48) {\n      this.displayText = this.lap / 24 + \" dia\";\n    } else {\n      this.displayText = this.lap / 24 + \" dias\";\n    }\n  }\n  JSONToObject(json) {\n    this.id = json.id;\n    this.lap = json.lap;\n    this.name = json.name;\n    this.active = json.active;\n    this.startTime = moment(json.startTime).toDate();\n    this.endTime = moment(json.endTime).toDate();\n    this.setDefaultDisplayText();\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}