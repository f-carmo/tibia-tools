{"ast":null,"code":"import { Hunt } from '../model/hunt';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"../hunt-card/hunt-card.component\";\nfunction HuntPlannerComponent_app_hunt_card_58_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-hunt-card\", 14);\n    i0.ɵɵlistener(\"loadThis\", function HuntPlannerComponent_app_hunt_card_58_Template_app_hunt_card_loadThis_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.loadHunt($event));\n    })(\"mergeHunt\", function HuntPlannerComponent_app_hunt_card_58_Template_app_hunt_card_mergeHunt_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.mergeHunt($event));\n    })(\"deleteHunt\", function HuntPlannerComponent_app_hunt_card_58_Template_app_hunt_card_deleteHunt_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.deleteHunt($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const hunt_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"hunt\", hunt_r1);\n  }\n}\nexport let HuntPlannerComponent = /*#__PURE__*/(() => {\n  class HuntPlannerComponent {\n    constructor() {\n      this.huntsList = [];\n      this.potionCap = 3.1;\n      this.boltCap = 0.85;\n      this.runeCap = 0;\n    }\n    ngOnInit() {\n      this.loadSavedHunts();\n    }\n    gerarResultado() {\n      const manaPerMinute = Math.floor(Number.parseInt(this.huntPotionsUsed) / Number.parseInt(this.huntHistoryTime));\n      const boltPerMinute = Math.floor(Number.parseInt(this.huntBoltsUsed) / Number.parseInt(this.huntHistoryTime));\n      const runesPerMinute = Math.floor(Number.parseInt(this.huntRunesUsed) / Number.parseInt(this.huntHistoryTime));\n      let resultMana = 0;\n      let resultBolt = 0;\n      let resultRunes = 0;\n      if (this.isTimeDefined() && this.isCapDefined()) {\n        let plannerCapacityAux = Number.parseInt(this.plannerCapacity);\n        let plannerTimeAux = Number.parseInt(this.plannerMinutes);\n        while (plannerCapacityAux > 0 && plannerTimeAux > 0) {\n          plannerTimeAux--;\n          plannerCapacityAux -= manaPerMinute * this.potionCap + boltPerMinute * this.boltCap + runesPerMinute * this.runeCap;\n          resultMana += manaPerMinute;\n          resultBolt += boltPerMinute;\n          resultRunes += runesPerMinute;\n        }\n      } else if (this.isCapDefined()) {\n        let plannerCapacityAux = Number.parseInt(this.plannerCapacity);\n        while (plannerCapacityAux > 0) {\n          plannerCapacityAux -= manaPerMinute * this.potionCap + boltPerMinute * this.boltCap + runesPerMinute * this.runeCap;\n          resultMana += manaPerMinute;\n          resultBolt += boltPerMinute;\n          resultRunes += runesPerMinute;\n        }\n      } else {\n        let plannerTimeAux = Number.parseInt(this.plannerMinutes);\n        while (plannerTimeAux > 0) {\n          plannerTimeAux--;\n          resultMana += manaPerMinute;\n          resultBolt += boltPerMinute;\n          resultRunes += runesPerMinute;\n        }\n      }\n      this.resultText = `Você vai precisar de ${resultMana} mana potions, ${resultBolt} bolts e ${resultRunes} runas de sua escolha`;\n    }\n    isTimeDefined() {\n      return Number.parseInt(this.plannerMinutes) > 0;\n    }\n    isCapDefined() {\n      return Number.parseInt(this.plannerCapacity) > 0;\n    }\n    saveHunt() {\n      const hunt = Hunt.create(this.huntName, this.huntHistoryTime, this.huntPotionsUsed, this.huntBoltsUsed, this.huntRunesUsed);\n      if (this.isValid(hunt)) {\n        const huntLookup = this.huntsList.filter(savedHunt => savedHunt.name === hunt.name).pop();\n        if (huntLookup) {\n          huntLookup.historyMinutes = hunt.historyMinutes;\n          huntLookup.historyPotions = hunt.historyPotions;\n          huntLookup.historyBolts = hunt.historyBolts;\n          huntLookup.historyRunes = hunt.historyRunes;\n        } else {\n          this.huntsList.push(hunt);\n        }\n        localStorage.removeItem('huntPlanner');\n        localStorage.setItem('huntPlanner', JSON.stringify(this.huntsList));\n      }\n    }\n    load() {\n      return JSON.parse(localStorage.getItem('huntPlanner'));\n    }\n    mergeHunt(huntName) {\n      if (this.huntName === huntName) {\n        const hunt = this.huntsList.filter(hunt => hunt.name === huntName).pop();\n        hunt.historyMinutes = hunt.historyMinutes + Number.parseInt(this.huntHistoryTime);\n        hunt.historyPotions = hunt.historyPotions + Number.parseInt(this.huntPotionsUsed);\n        hunt.historyBolts = hunt.historyBolts + Number.parseInt(this.huntBoltsUsed);\n        hunt.historyRunes = hunt.historyRunes + Number.parseInt(this.huntRunesUsed);\n        this.huntHistoryTime = hunt.historyMinutes.toString();\n        this.huntPotionsUsed = hunt.historyPotions.toString();\n        this.huntBoltsUsed = hunt.historyBolts.toString();\n        this.huntRunesUsed = hunt.historyRunes.toString();\n        localStorage.removeItem('huntPlanner');\n        localStorage.setItem('huntPlanner', JSON.stringify(this.huntsList));\n      } else {\n        console.error(\"o nome da hunt é diferente - carregue uma hunt antes de mergea-la\");\n      }\n    }\n    deleteHunt(huntName) {\n      this.huntsList = this.huntsList.filter(hunt => hunt.name !== huntName);\n      localStorage.removeItem('huntPlanner');\n      localStorage.setItem('huntPlanner', JSON.stringify(this.huntsList));\n    }\n    loadSavedHunts() {\n      const loaded = this.load();\n      if (loaded) {\n        loaded.forEach(obj => {\n          if (this.isValid(obj)) {\n            this.huntsList.push(Hunt.createFromJSON(obj));\n          }\n        });\n      }\n    }\n    isValid(obj) {\n      return obj.name && obj.name !== \"\";\n    }\n    loadHunt(hunt) {\n      this.huntHistoryTime = hunt.historyMinutes.toString();\n      this.huntPotionsUsed = hunt.historyPotions.toString();\n      this.huntBoltsUsed = hunt.historyBolts.toString();\n      this.huntRunesUsed = hunt.historyRunes.toString();\n      this.huntName = hunt.name;\n    }\n    static #_ = this.ɵfac = function HuntPlannerComponent_Factory(t) {\n      return new (t || HuntPlannerComponent)();\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: HuntPlannerComponent,\n      selectors: [[\"app-hunt-planner\"]],\n      decls: 59,\n      vars: 9,\n      consts: [[1, \"row\"], [1, \"col-md-4\"], [1, \"col-md-12\", \"form-group\"], [\"type\", \"text\", \"value\", \"0\", \"name\", \"_huntName\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"text\", \"value\", \"0\", \"name\", \"_huntHistoryTime\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"text\", \"value\", \"0\", \"name\", \"_huntPotionsUsed\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"text\", \"value\", \"0\", \"name\", \"_huntBoltsUsed\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"text\", \"value\", \"0\", \"name\", \"_huntRunesUsed\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"button\", 1, \"btn\", \"btn-control\", \"btn-success\", 3, \"click\"], [\"type\", \"text\", \"value\", \"0\", \"name\", \"_plannerMinutes\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"text\", \"value\", \"0\", \"name\", \"_plannerCapacity\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"name\", \"_results\"], [1, \"card-deck\"], [3, \"hunt\", \"loadThis\", \"mergeHunt\", \"deleteHunt\", 4, \"ngFor\", \"ngForOf\"], [3, \"hunt\", \"loadThis\", \"mergeHunt\", \"deleteHunt\"]],\n      template: function HuntPlannerComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"label\");\n          i0.ɵɵtext(3, \"Hunt history\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"div\", 0)(5, \"div\", 2)(6, \"label\");\n          i0.ɵɵtext(7, \"Hunt name (optional)\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"input\", 3);\n          i0.ɵɵlistener(\"ngModelChange\", function HuntPlannerComponent_Template_input_ngModelChange_8_listener($event) {\n            return ctx.huntName = $event;\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(9, \"div\", 0)(10, \"div\", 2)(11, \"label\");\n          i0.ɵɵtext(12, \"Time (in minutes)\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"input\", 4);\n          i0.ɵɵlistener(\"ngModelChange\", function HuntPlannerComponent_Template_input_ngModelChange_13_listener($event) {\n            return ctx.huntHistoryTime = $event;\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(14, \"div\", 0)(15, \"div\", 2)(16, \"label\");\n          i0.ɵɵtext(17, \"Mana potions used\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(18, \"input\", 5);\n          i0.ɵɵlistener(\"ngModelChange\", function HuntPlannerComponent_Template_input_ngModelChange_18_listener($event) {\n            return ctx.huntPotionsUsed = $event;\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(19, \"div\", 0)(20, \"div\", 2)(21, \"label\");\n          i0.ɵɵtext(22, \"Bolts used\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(23, \"input\", 6);\n          i0.ɵɵlistener(\"ngModelChange\", function HuntPlannerComponent_Template_input_ngModelChange_23_listener($event) {\n            return ctx.huntBoltsUsed = $event;\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(24, \"div\", 0)(25, \"div\", 2)(26, \"label\");\n          i0.ɵɵtext(27, \"Runes used\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(28, \"input\", 7);\n          i0.ɵɵlistener(\"ngModelChange\", function HuntPlannerComponent_Template_input_ngModelChange_28_listener($event) {\n            return ctx.huntRunesUsed = $event;\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(29, \"div\", 0)(30, \"div\", 2)(31, \"button\", 8);\n          i0.ɵɵlistener(\"click\", function HuntPlannerComponent_Template_button_click_31_listener() {\n            return ctx.saveHunt();\n          });\n          i0.ɵɵtext(32, \"Salvar hunt\");\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(33, \"div\", 1)(34, \"label\");\n          i0.ɵɵtext(35, \"Hunt planning\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(36, \"div\", 0)(37, \"div\", 2)(38, \"label\");\n          i0.ɵɵtext(39, \"Time (in minutes)\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(40, \"input\", 9);\n          i0.ɵɵlistener(\"ngModelChange\", function HuntPlannerComponent_Template_input_ngModelChange_40_listener($event) {\n            return ctx.plannerMinutes = $event;\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(41, \"div\", 0)(42, \"div\", 2)(43, \"label\");\n          i0.ɵɵtext(44, \"Cap available\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(45, \"input\", 10);\n          i0.ɵɵlistener(\"ngModelChange\", function HuntPlannerComponent_Template_input_ngModelChange_45_listener($event) {\n            return ctx.plannerCapacity = $event;\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(46, \"div\", 0)(47, \"div\", 2)(48, \"button\", 8);\n          i0.ɵɵlistener(\"click\", function HuntPlannerComponent_Template_button_click_48_listener() {\n            return ctx.gerarResultado();\n          });\n          i0.ɵɵtext(49, \"Gerar\");\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(50, \"div\", 1)(51, \"label\");\n          i0.ɵɵtext(52, \"Hunt results\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(53, \"div\", 0)(54, \"div\", 2)(55, \"p\", 11);\n          i0.ɵɵtext(56);\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵelementStart(57, \"div\", 12);\n          i0.ɵɵtemplate(58, HuntPlannerComponent_app_hunt_card_58_Template, 1, 1, \"app-hunt-card\", 13);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"ngModel\", ctx.huntName);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngModel\", ctx.huntHistoryTime);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngModel\", ctx.huntPotionsUsed);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngModel\", ctx.huntBoltsUsed);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngModel\", ctx.huntRunesUsed);\n          i0.ɵɵadvance(12);\n          i0.ɵɵproperty(\"ngModel\", ctx.plannerMinutes);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngModel\", ctx.plannerCapacity);\n          i0.ɵɵadvance(11);\n          i0.ɵɵtextInterpolate1(\" \", ctx.resultText, \" \");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngForOf\", ctx.huntsList);\n        }\n      },\n      dependencies: [i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgModel, i2.NgForOf, i3.HuntCardComponent]\n    });\n  }\n  return HuntPlannerComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}